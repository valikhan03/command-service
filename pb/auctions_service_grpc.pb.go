// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auctions_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionsServiceClient is the client API for AuctionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionsServiceClient interface {
	CreateAuction(ctx context.Context, in *CreateAuctionRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAuction(ctx context.Context, in *UpdateAuctionRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteAuction(ctx context.Context, in *DeleteAuctionRequest, opts ...grpc.CallOption) (*Response, error)
	AddParticipant(ctx context.Context, in *AddParticipantRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteParticipant(ctx context.Context, in *DeleteParticipantRequest, opts ...grpc.CallOption) (*Response, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteProduct(ctx context.Context, in *DeletePoductRequest, opts ...grpc.CallOption) (*Response, error)
}

type auctionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionsServiceClient(cc grpc.ClientConnInterface) AuctionsServiceClient {
	return &auctionsServiceClient{cc}
}

func (c *auctionsServiceClient) CreateAuction(ctx context.Context, in *CreateAuctionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/CreateAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) UpdateAuction(ctx context.Context, in *UpdateAuctionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/UpdateAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) DeleteAuction(ctx context.Context, in *DeleteAuctionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/DeleteAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) AddParticipant(ctx context.Context, in *AddParticipantRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/AddParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) DeleteParticipant(ctx context.Context, in *DeleteParticipantRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/DeleteParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionsServiceClient) DeleteProduct(ctx context.Context, in *DeletePoductRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AuctionsService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionsServiceServer is the server API for AuctionsService service.
// All implementations must embed UnimplementedAuctionsServiceServer
// for forward compatibility
type AuctionsServiceServer interface {
	CreateAuction(context.Context, *CreateAuctionRequest) (*Response, error)
	UpdateAuction(context.Context, *UpdateAuctionRequest) (*Response, error)
	DeleteAuction(context.Context, *DeleteAuctionRequest) (*Response, error)
	AddParticipant(context.Context, *AddParticipantRequest) (*Response, error)
	DeleteParticipant(context.Context, *DeleteParticipantRequest) (*Response, error)
	AddProduct(context.Context, *AddProductRequest) (*Response, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*Response, error)
	DeleteProduct(context.Context, *DeletePoductRequest) (*Response, error)
}

// UnimplementedAuctionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionsServiceServer struct {
}

func (UnimplementedAuctionsServiceServer) CreateAuction(context.Context, *CreateAuctionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuction not implemented")
}
func (UnimplementedAuctionsServiceServer) UpdateAuction(context.Context, *UpdateAuctionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuction not implemented")
}
func (UnimplementedAuctionsServiceServer) DeleteAuction(context.Context, *DeleteAuctionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuction not implemented")
}
func (UnimplementedAuctionsServiceServer) AddParticipant(context.Context, *AddParticipantRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParticipant not implemented")
}
func (UnimplementedAuctionsServiceServer) DeleteParticipant(context.Context, *DeleteParticipantRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipant not implemented")
}
func (UnimplementedAuctionsServiceServer) AddProduct(context.Context, *AddProductRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedAuctionsServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedAuctionsServiceServer) DeleteProduct(context.Context, *DeletePoductRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedAuctionsServiceServer) mustEmbedUnimplementedAuctionsServiceServer() {}

// UnsafeAuctionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionsServiceServer will
// result in compilation errors.
type UnsafeAuctionsServiceServer interface {
	mustEmbedUnimplementedAuctionsServiceServer()
}

func RegisterAuctionsServiceServer(s grpc.ServiceRegistrar, srv AuctionsServiceServer) {
	s.RegisterService(&AuctionsService_ServiceDesc, srv)
}

func _AuctionsService_CreateAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).CreateAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/CreateAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).CreateAuction(ctx, req.(*CreateAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_UpdateAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).UpdateAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/UpdateAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).UpdateAuction(ctx, req.(*UpdateAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_DeleteAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).DeleteAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/DeleteAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).DeleteAuction(ctx, req.(*DeleteAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_AddParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).AddParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/AddParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).AddParticipant(ctx, req.(*AddParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_DeleteParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).DeleteParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/DeleteParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).DeleteParticipant(ctx, req.(*DeleteParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionsService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionsServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuctionsService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionsServiceServer).DeleteProduct(ctx, req.(*DeletePoductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionsService_ServiceDesc is the grpc.ServiceDesc for AuctionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AuctionsService",
	HandlerType: (*AuctionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuction",
			Handler:    _AuctionsService_CreateAuction_Handler,
		},
		{
			MethodName: "UpdateAuction",
			Handler:    _AuctionsService_UpdateAuction_Handler,
		},
		{
			MethodName: "DeleteAuction",
			Handler:    _AuctionsService_DeleteAuction_Handler,
		},
		{
			MethodName: "AddParticipant",
			Handler:    _AuctionsService_AddParticipant_Handler,
		},
		{
			MethodName: "DeleteParticipant",
			Handler:    _AuctionsService_DeleteParticipant_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _AuctionsService_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _AuctionsService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _AuctionsService_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auctions_service.proto",
}
